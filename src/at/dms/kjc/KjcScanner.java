/* The following code was generated by JFlex 1.3.2 on 11/26/07 4:03 PM */

/*
 * Copyright (C) 1990-2001 DMS Decision Management Systems Ges.m.b.H.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 *
 * $Id: Kjc.flex,v 1.6 2007/02/22 20:15:01 dimock Exp $
 */

package at.dms.kjc;

import at.dms.compiler.CWarning;
import at.dms.compiler.Compiler;
import at.dms.compiler.CompilerMessages;
import at.dms.compiler.JavaStyleComment;
import at.dms.compiler.JavadocComment;
import at.dms.compiler.PositionedError;
import at.dms.compiler.antlr.extra.CToken;
import at.dms.compiler.antlr.extra.InputBuffer;
import at.dms.compiler.antlr.extra.Scanner;
import at.dms.compiler.antlr.runtime.Token;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.3.2
 * on 11/26/07 4:03 PM from the specification file
 * <tt>file:/net/scourge/x/hormati/streamit/streams/src/at/dms/kjc/Kjc.flex</tt>
 */
public class KjcScanner extends at.dms.compiler.antlr.extra.Scanner implements KjcTokenTypes {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  final private static int YY_BUFFERSIZE = 16384;

  /** lexical states */
  final public static int STRINGLITERAL = 1;
  final public static int YYINITIAL = 0;
  final public static int TRADITIONALCOMMENT = 3;
  final public static int ENDOFLINECOMMENT = 4;
  final public static int CHARLITERAL = 2;

  /** 
   * Translates characters to character classes
   */
  final private static String yycmap_packed = 
    "\11\77\1\1\1\3\1\0\1\1\1\2\16\77\4\0\1\1\1\56"+
    "\1\70\1\0\1\76\1\60\1\42\1\71\1\57\1\64\1\67\1\10"+
    "\1\50\1\51\1\52\1\66\1\72\3\101\4\6\2\4\1\47\1\65"+
    "\1\55\1\41\1\45\1\61\1\0\3\5\1\75\1\7\1\75\5\76"+
    "\1\73\13\76\1\74\2\76\1\53\1\100\1\62\1\46\1\76\1\0"+
    "\1\11\1\12\1\16\1\30\1\21\1\31\1\33\1\25\1\26\1\76"+
    "\1\23\1\20\1\34\1\22\1\17\1\35\1\76\1\15\1\13\1\14"+
    "\1\27\1\36\1\37\1\32\1\24\1\40\1\54\1\44\1\63\1\43"+
    "\41\77\2\0\4\76\4\0\1\76\2\0\1\77\7\0\1\76\4\0"+
    "\1\76\5\0\27\76\1\0\37\76\1\0\u013f\76\31\0\162\76\4\0"+
    "\14\76\16\0\5\76\11\0\1\76\21\0\130\77\5\0\23\77\12\0"+
    "\1\76\13\0\1\76\1\0\3\76\1\0\1\76\1\0\24\76\1\0"+
    "\54\76\1\0\46\76\1\0\5\76\4\0\202\76\1\0\4\77\3\0"+
    "\105\76\1\0\46\76\2\0\2\76\6\0\20\76\41\0\46\76\2\0"+
    "\1\76\7\0\47\76\11\0\21\77\1\0\27\77\1\0\3\77\1\0"+
    "\1\77\1\0\2\77\1\0\1\77\13\0\33\76\5\0\3\76\15\0"+
    "\4\77\14\0\6\77\13\0\32\76\5\0\13\76\16\77\7\0\12\77"+
    "\4\0\2\76\1\77\143\76\1\0\1\76\10\77\1\0\6\77\2\76"+
    "\2\77\1\0\4\77\2\76\12\77\3\76\2\0\1\76\17\0\1\77"+
    "\1\76\1\77\36\76\33\77\2\0\3\76\60\0\46\76\13\77\1\76"+
    "\u014f\0\3\77\66\76\2\0\1\77\1\76\20\77\2\0\1\76\4\77"+
    "\3\0\12\76\2\77\2\0\12\77\21\0\3\77\1\0\10\76\2\0"+
    "\2\76\2\0\26\76\1\0\7\76\1\0\1\76\3\0\4\76\2\0"+
    "\1\77\1\76\7\77\2\0\2\77\2\0\3\77\11\0\1\77\4\0"+
    "\2\76\1\0\3\76\2\77\2\0\12\77\4\76\15\0\3\77\1\0"+
    "\6\76\4\0\2\76\2\0\26\76\1\0\7\76\1\0\2\76\1\0"+
    "\2\76\1\0\2\76\2\0\1\77\1\0\5\77\4\0\2\77\2\0"+
    "\3\77\13\0\4\76\1\0\1\76\7\0\14\77\3\76\14\0\3\77"+
    "\1\0\11\76\1\0\3\76\1\0\26\76\1\0\7\76\1\0\2\76"+
    "\1\0\5\76\2\0\1\77\1\76\10\77\1\0\3\77\1\0\3\77"+
    "\2\0\1\76\17\0\2\76\2\77\2\0\12\77\1\0\1\76\17\0"+
    "\3\77\1\0\10\76\2\0\2\76\2\0\26\76\1\0\7\76\1\0"+
    "\2\76\1\0\5\76\2\0\1\77\1\76\6\77\3\0\2\77\2\0"+
    "\3\77\10\0\2\77\4\0\2\76\1\0\3\76\4\0\12\77\1\0"+
    "\1\76\20\0\1\77\1\76\1\0\6\76\3\0\3\76\1\0\4\76"+
    "\3\0\2\76\1\0\1\76\1\0\2\76\3\0\2\76\3\0\3\76"+
    "\3\0\10\76\1\0\3\76\4\0\5\77\3\0\3\77\1\0\4\77"+
    "\11\0\1\77\17\0\11\77\11\0\1\76\7\0\3\77\1\0\10\76"+
    "\1\0\3\76\1\0\27\76\1\0\12\76\1\0\5\76\4\0\7\77"+
    "\1\0\3\77\1\0\4\77\7\0\2\77\11\0\2\76\4\0\12\77"+
    "\22\0\2\77\1\0\10\76\1\0\3\76\1\0\27\76\1\0\12\76"+
    "\1\0\5\76\2\0\1\77\1\76\7\77\1\0\3\77\1\0\4\77"+
    "\7\0\2\77\7\0\1\76\1\0\2\76\4\0\12\77\22\0\2\77"+
    "\1\0\10\76\1\0\3\76\1\0\27\76\1\0\20\76\4\0\6\77"+
    "\2\0\3\77\1\0\4\77\11\0\1\77\10\0\2\76\4\0\12\77"+
    "\22\0\2\77\1\0\22\76\3\0\30\76\1\0\11\76\1\0\1\76"+
    "\2\0\7\76\3\0\1\77\4\0\6\77\1\0\1\77\1\0\10\77"+
    "\22\0\2\77\15\0\60\76\1\77\2\76\7\77\4\0\10\76\10\77"+
    "\1\0\12\77\47\0\2\76\1\0\1\76\2\0\2\76\1\0\1\76"+
    "\2\0\1\76\6\0\4\76\1\0\7\76\1\0\3\76\1\0\1\76"+
    "\1\0\1\76\2\0\2\76\1\0\4\76\1\77\2\76\6\77\1\0"+
    "\2\77\1\76\2\0\5\76\1\0\1\76\1\0\6\77\2\0\12\77"+
    "\2\0\2\76\42\0\1\76\27\0\2\77\6\0\12\77\13\0\1\77"+
    "\1\0\1\77\1\0\1\77\4\0\2\77\10\76\1\0\42\76\6\0"+
    "\24\77\1\0\2\77\4\76\4\0\10\77\1\0\44\77\11\0\1\77"+
    "\71\0\42\76\1\0\5\76\1\0\2\76\1\0\7\77\3\0\4\77"+
    "\6\0\12\77\6\0\6\76\4\77\106\0\46\76\12\0\51\76\7\0"+
    "\132\76\5\0\104\76\5\0\122\76\6\0\7\76\1\0\77\76\1\0"+
    "\1\76\1\0\4\76\2\0\7\76\1\0\1\76\1\0\4\76\2\0"+
    "\47\76\1\0\1\76\1\0\4\76\2\0\37\76\1\0\1\76\1\0"+
    "\4\76\2\0\7\76\1\0\1\76\1\0\4\76\2\0\7\76\1\0"+
    "\7\76\1\0\27\76\1\0\37\76\1\0\1\76\1\0\4\76\2\0"+
    "\7\76\1\0\47\76\1\0\23\76\16\0\11\77\56\0\125\76\14\0"+
    "\u026c\76\2\0\10\76\12\0\32\76\5\0\113\76\3\0\3\76\17\0"+
    "\15\76\1\0\4\76\3\77\13\0\22\76\3\77\13\0\22\76\2\77"+
    "\14\0\15\76\1\0\3\76\1\0\2\77\14\0\64\76\40\77\3\0"+
    "\1\76\3\0\2\76\1\77\2\0\12\77\41\0\3\77\2\0\12\77"+
    "\6\0\130\76\10\0\51\76\1\77\126\0\35\76\3\0\14\77\4\0"+
    "\14\77\12\0\12\77\36\76\2\0\5\76\u038b\0\154\76\224\0\234\76"+
    "\4\0\132\76\6\0\26\76\2\0\6\76\2\0\46\76\2\0\6\76"+
    "\2\0\10\76\1\0\1\76\1\0\1\76\1\0\1\76\1\0\37\76"+
    "\2\0\65\76\1\0\7\76\1\0\1\76\3\0\3\76\1\0\7\76"+
    "\3\0\4\76\2\0\6\76\4\0\15\76\5\0\3\76\1\0\7\76"+
    "\17\0\4\77\32\0\5\77\20\0\2\76\23\0\1\76\13\0\4\77"+
    "\6\0\6\77\1\0\1\76\15\0\1\76\40\0\22\76\36\0\15\77"+
    "\4\0\1\77\3\0\6\77\27\0\1\76\4\0\1\76\2\0\12\76"+
    "\1\0\1\76\3\0\5\76\6\0\1\76\1\0\1\76\1\0\1\76"+
    "\1\0\4\76\1\0\3\76\1\0\7\76\3\0\3\76\5\0\5\76"+
    "\26\0\44\76\u0e81\0\3\76\31\0\11\76\6\77\1\0\5\76\2\0"+
    "\5\76\4\0\126\76\2\0\2\77\2\0\3\76\1\0\137\76\5\0"+
    "\50\76\4\0\136\76\21\0\30\76\70\0\20\76\u0200\0\u19b6\76\112\0"+
    "\u51a6\76\132\0\u048d\76\u0773\0\u2ba4\76\u215c\0\u012e\76\2\0\73\76\225\0"+
    "\7\76\14\0\5\76\5\0\1\76\1\77\12\76\1\0\15\76\1\0"+
    "\5\76\1\0\1\76\1\0\2\76\1\0\2\76\1\0\154\76\41\0"+
    "\u016b\76\22\0\100\76\2\0\66\76\50\0\15\76\3\0\20\77\20\0"+
    "\4\77\17\0\2\76\30\0\3\76\31\0\1\76\6\0\5\76\1\0"+
    "\207\76\2\0\1\77\4\0\1\76\13\0\12\77\7\0\32\76\4\0"+
    "\1\76\1\0\32\76\12\0\132\76\3\0\6\76\2\0\6\76\2\0"+
    "\6\76\2\0\3\76\3\0\2\76\3\0\2\76\22\0\3\77\4\0";

  /** 
   * Translates characters to character classes
   */
  final private static char [] yycmap = yy_unpack_cmap(yycmap_packed);

  /** 
   * Translates a state to a row index in the transition table
   */
  final private static int yy_rowMap [] = { 
        0,    66,   132,   198,   264,   330,   330,   396,   330,   462, 
      528,   594,   660,   726,   792,   858,   924,   990,  1056,  1122, 
     1188,  1254,  1320,  1386,  1452,  1518,  1584,  1650,  1716,  1782, 
      330,  1848,  1914,  1980,   330,   330,  2046,  2112,   330,   330, 
     2178,  2244,   330,  2310,   330,   330,   330,   330,   330,  2376, 
     2442,   330,   330,  2508,  2574,  2640,   330,   330,  2706,  2772, 
     2838,   330,  2904,  2970,  3036,   330,  3102,  3168,  3234,   330, 
     3300,   330,   330,  3366,   330,   330,  3432,  3498,  3564,  3630, 
     3696,  3762,  3828,  3894,  3960,  4026,  4092,  4158,  4224,  4290, 
     4356,  4422,  4488,  4554,  4620,  4686,  4752,  4818,  4884,   528, 
     4950,  5016,  5082,  5148,  5214,  5280,  5346,  5412,  5478,  5544, 
     5610,  5676,  5742,   330,   330,   330,   330,   330,   330,  5808, 
      330,   330,   330,   330,  5874,   330,   330,   330,   330,   330, 
      330,  5940,  6006,  6072,   330,  6138,   330,   330,   330,   330, 
      330,   330,   330,  6204,   330,   330,  6270,  6336,  6402,  6468, 
     6534,  6600,  6666,  6732,  6798,  6864,   330,   330,  3102,  6930, 
     6996,  7062,  7128,  7194,  7260,  7326,  7392,  7458,  7524,  7590, 
     7656,  7722,   528,  7788,  7854,  7920,  7986,  8052,  8118,  8184, 
     8250,  8316,  8382,  8448,  8514,  8580,   528,  8646,  8712,  8778, 
     8844,  8910,  8976,  9042,   528,  9108,  9174,  9240,  9306,  9372, 
     9438,  9504,  9570,  9636,  9702,   330,  9768,   330,  9834,   330, 
     9900,   330,   330,   330,   330,   330,   330,   330,   330,  6270, 
      330,  9966, 10032, 10098,   528, 10164, 10230, 10296, 10362, 10428, 
    10494, 10560,   528, 10626,   528, 10692,   528, 10758, 10824, 10890, 
    10956,   528,   528,   528, 11022, 11088,   528, 11154, 11220, 11286, 
    11352, 11418, 11484, 11550, 11616, 11682,   528, 11748, 11814, 11880, 
    11946, 12012,   528, 12078,   330, 12144,   528, 12210, 12276, 12342, 
    12408,   528,   528, 12474, 12540, 12606, 12672,   528,   528, 12738, 
      528, 12804, 12870, 12936, 13002, 13068, 13134, 13200, 13266,   528, 
      528, 13332, 13398, 13464, 13530, 13596, 13662,   528, 13728, 13794, 
      528, 13860, 13926,   528, 13992,   528,   528, 14058, 14124,   528, 
    14190, 14256,   528, 14322,   528, 14388, 14454, 14520, 14586, 14652, 
      528, 14718, 14784,   528, 14850, 14916, 14982, 15048,   528, 15114, 
    15180, 15246,   528,   528,   528, 15312,   528, 15378,   528,   528, 
    15444, 15510,   528, 15576, 15642, 15708, 15774,   528, 15840,   528, 
    15906,   528, 15972,   528, 16038,   528,   528, 16104,   528
  };

  /** 
   * The packed transition table of the DFA (part 0)
   */
  final private static String yy_packed0 = 
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\13"+
    "\1\23\1\24\1\25\3\13\1\26\1\13\1\27\1\30"+
    "\1\13\1\31\1\13\1\32\1\33\1\34\1\13\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65"+
    "\1\66\4\13\2\6\1\12\2\67\1\70\1\71\64\67"+
    "\1\72\7\67\1\73\1\67\2\74\1\75\1\76\65\74"+
    "\1\6\6\74\1\77\1\74\2\100\1\101\1\102\63\100"+
    "\1\103\12\100\2\104\1\105\1\106\76\104\105\0\1\11"+
    "\102\0\1\12\1\0\1\12\1\107\10\0\1\110\1\107"+
    "\6\0\2\111\20\0\1\112\17\0\1\12\1\110\1\0"+
    "\1\111\3\0\1\12\4\0\4\13\1\0\30\13\31\0"+
    "\6\13\1\0\1\13\10\0\1\113\30\0\1\114\44\0"+
    "\4\13\1\0\1\13\1\115\26\13\31\0\6\13\1\0"+
    "\1\13\4\0\4\13\1\0\4\13\1\116\1\13\1\117"+
    "\4\13\1\120\14\13\31\0\6\13\1\0\1\13\4\0"+
    "\4\13\1\0\3\13\1\121\7\13\1\122\1\123\1\13"+
    "\1\124\7\13\1\125\1\13\31\0\6\13\1\0\1\13"+
    "\4\0\4\13\1\0\4\13\1\126\7\13\1\127\13\13"+
    "\31\0\6\13\1\0\1\13\4\0\4\13\1\0\10\13"+
    "\1\130\17\13\31\0\6\13\1\0\1\13\4\0\4\13"+
    "\1\0\1\131\5\13\1\132\1\133\4\13\1\134\13\13"+
    "\31\0\6\13\1\0\1\13\4\0\4\13\1\0\6\13"+
    "\1\135\21\13\31\0\6\13\1\0\1\13\4\0\4\13"+
    "\1\0\7\13\1\136\11\13\1\137\6\13\31\0\6\13"+
    "\1\0\1\13\4\0\4\13\1\0\1\140\7\13\1\141"+
    "\5\13\1\142\11\13\31\0\6\13\1\0\1\13\4\0"+
    "\4\13\1\0\11\13\1\143\6\13\1\144\2\13\1\145"+
    "\4\13\31\0\6\13\1\0\1\13\4\0\4\13\1\0"+
    "\6\13\1\146\1\13\1\147\17\13\31\0\6\13\1\0"+
    "\1\13\4\0\4\13\1\0\1\150\5\13\1\151\1\152"+
    "\5\13\1\153\12\13\31\0\6\13\1\0\1\13\4\0"+
    "\4\13\1\0\6\13\1\154\21\13\31\0\6\13\1\0"+
    "\1\13\4\0\4\13\1\0\1\155\3\13\1\156\11\13"+
    "\1\157\11\13\31\0\6\13\1\0\1\13\4\0\4\13"+
    "\1\0\6\13\1\160\21\13\31\0\6\13\1\0\1\13"+
    "\4\0\4\13\1\0\14\13\1\161\13\13\31\0\6\13"+
    "\1\0\1\13\41\0\1\162\101\0\1\163\1\164\100\0"+
    "\1\165\2\0\1\166\76\0\1\167\3\0\1\170\75\0"+
    "\1\171\101\0\1\172\7\0\1\173\34\0\1\112\1\0"+
    "\1\112\63\0\1\112\6\0\1\112\41\0\1\174\13\0"+
    "\1\175\65\0\1\176\101\0\1\177\101\0\1\200\24\0"+
    "\1\201\1\202\53\0\1\203\44\0\1\204\1\0\1\205"+
    "\1\107\10\0\1\110\1\107\6\0\2\111\1\206\17\0"+
    "\1\112\17\0\1\205\1\110\1\206\1\111\3\0\1\205"+
    "\2\67\2\0\64\67\1\0\7\67\1\0\1\67\3\0"+
    "\1\71\76\0\3\207\1\0\2\207\1\210\3\207\1\211"+
    "\1\207\1\212\1\213\4\207\1\214\6\207\1\215\36\207"+
    "\1\216\1\217\1\220\5\207\1\221\1\220\71\0\1\222"+
    "\13\0\1\76\76\0\3\207\1\0\2\207\1\223\3\207"+
    "\1\224\1\207\1\225\1\226\4\207\1\227\6\207\1\230"+
    "\36\207\1\231\1\232\1\233\5\207\1\234\1\233\2\100"+
    "\2\0\63\100\1\0\12\100\3\0\1\102\76\0\2\235"+
    "\1\101\1\102\62\235\1\236\1\237\12\235\2\104\2\0"+
    "\76\104\3\0\1\106\102\0\1\240\1\0\1\240\1\0"+
    "\1\241\40\0\1\241\20\0\1\240\6\0\1\240\4\0"+
    "\1\112\1\0\1\112\1\107\11\0\1\107\6\0\2\111"+
    "\40\0\1\112\2\0\1\111\3\0\1\112\4\0\4\13"+
    "\1\0\2\13\1\242\25\13\31\0\6\13\1\0\1\13"+
    "\4\0\4\13\1\0\10\13\1\243\17\13\31\0\6\13"+
    "\1\0\1\13\4\0\4\13\1\0\6\13\1\244\21\13"+
    "\31\0\6\13\1\0\1\13\4\0\4\13\1\0\3\13"+
    "\1\245\24\13\31\0\6\13\1\0\1\13\4\0\4\13"+
    "\1\0\1\246\3\13\1\247\23\13\31\0\6\13\1\0"+
    "\1\13\4\0\4\13\1\0\11\13\1\250\16\13\31\0"+
    "\6\13\1\0\1\13\4\0\4\13\1\0\6\13\1\251"+
    "\21\13\31\0\6\13\1\0\1\13\4\0\4\13\1\0"+
    "\24\13\1\252\3\13\31\0\6\13\1\0\1\13\4\0"+
    "\4\13\1\0\15\13\1\253\12\13\31\0\6\13\1\0"+
    "\1\13\4\0\4\13\1\0\1\254\12\13\1\255\2\13"+
    "\1\256\11\13\31\0\6\13\1\0\1\13\4\0\4\13"+
    "\1\0\4\13\1\257\10\13\1\260\12\13\31\0\6\13"+
    "\1\0\1\13\4\0\4\13\1\0\3\13\1\261\24\13"+
    "\31\0\6\13\1\0\1\13\4\0\4\13\1\0\2\13"+
    "\1\262\1\263\24\13\31\0\6\13\1\0\1\13\4\0"+
    "\4\13\1\0\11\13\1\264\16\13\31\0\6\13\1\0"+
    "\1\13\4\0\4\13\1\0\1\265\27\13\31\0\6\13"+
    "\1\0\1\13\4\0\4\13\1\0\1\266\27\13\31\0"+
    "\6\13\1\0\1\13\4\0\4\13\1\0\11\13\1\267"+
    "\16\13\31\0\6\13\1\0\1\13\4\0\4\13\1\0"+
    "\2\13\1\270\25\13\31\0\6\13\1\0\1\13\4\0"+
    "\4\13\1\0\3\13\1\271\24\13\31\0\6\13\1\0"+
    "\1\13\4\0\4\13\1\0\3\13\1\272\24\13\31\0"+
    "\6\13\1\0\1\13\4\0\4\13\1\0\26\13\1\273"+
    "\1\13\31\0\6\13\1\0\1\13\4\0\4\13\1\0"+
    "\7\13\1\274\20\13\31\0\6\13\1\0\1\13\4\0"+
    "\4\13\1\0\2\13\1\275\1\276\24\13\31\0\6\13"+
    "\1\0\1\13\4\0\4\13\1\0\24\13\1\277\3\13"+
    "\31\0\6\13\1\0\1\13\4\0\4\13\1\0\16\13"+
    "\1\300\11\13\31\0\6\13\1\0\1\13\4\0\4\13"+
    "\1\0\20\13\1\301\7\13\31\0\6\13\1\0\1\13"+
    "\4\0\4\13\1\0\7\13\1\302\20\13\31\0\6\13"+
    "\1\0\1\13\4\0\4\13\1\0\4\13\1\303\23\13"+
    "\31\0\6\13\1\0\1\13\4\0\4\13\1\0\6\13"+
    "\1\304\21\13\31\0\6\13\1\0\1\13\4\0\4\13"+
    "\1\0\11\13\1\305\16\13\31\0\6\13\1\0\1\13"+
    "\4\0\4\13\1\0\3\13\1\306\24\13\31\0\6\13"+
    "\1\0\1\13\4\0\4\13\1\0\5\13\1\307\22\13"+
    "\31\0\6\13\1\0\1\13\4\0\4\13\1\0\6\13"+
    "\1\310\6\13\1\311\12\13\31\0\6\13\1\0\1\13"+
    "\4\0\4\13\1\0\1\13\1\312\26\13\31\0\6\13"+
    "\1\0\1\13\4\0\4\13\1\0\7\13\1\313\5\13"+
    "\1\314\12\13\31\0\6\13\1\0\1\13\4\0\4\13"+
    "\1\0\15\13\1\315\12\13\31\0\6\13\1\0\1\13"+
    "\41\0\1\316\3\0\1\317\75\0\1\320\44\0\1\204"+
    "\1\0\1\204\1\107\11\0\1\107\6\0\2\111\20\0"+
    "\1\112\17\0\1\204\2\0\1\111\3\0\1\204\4\0"+
    "\1\204\1\0\1\205\1\107\10\0\1\110\1\107\6\0"+
    "\2\111\20\0\1\112\17\0\1\205\1\110\1\0\1\111"+
    "\3\0\1\205\4\0\4\321\1\0\2\321\3\0\1\321"+
    "\2\0\1\321\6\0\2\321\40\0\1\321\2\0\1\321"+
    "\3\0\1\321\6\0\1\322\63\0\1\322\6\0\1\322"+
    "\6\0\1\210\63\0\1\210\6\0\1\210\6\0\1\323"+
    "\62\0\1\324\1\323\6\0\1\323\71\0\1\325\101\0"+
    "\1\326\101\0\1\327\101\0\1\330\101\0\1\331\101\0"+
    "\1\332\101\0\1\333\16\0\1\334\62\0\1\324\1\334"+
    "\6\0\1\334\71\0\1\335\14\0\1\240\1\0\1\240"+
    "\21\0\2\111\40\0\1\240\2\0\1\111\3\0\1\240"+
    "\4\0\1\240\1\0\1\240\63\0\1\240\6\0\1\240"+
    "\4\0\4\13\1\0\3\13\1\336\24\13\31\0\6\13"+
    "\1\0\1\13\4\0\4\13\1\0\1\337\27\13\31\0"+
    "\6\13\1\0\1\13\4\0\4\13\1\0\7\13\1\340"+
    "\20\13\31\0\6\13\1\0\1\13\4\0\4\13\1\0"+
    "\10\13\1\341\17\13\31\0\6\13\1\0\1\13\4\0"+
    "\4\13\1\0\3\13\1\342\24\13\31\0\6\13\1\0"+
    "\1\13\4\0\4\13\1\0\15\13\1\343\12\13\31\0"+
    "\6\13\1\0\1\13\4\0\4\13\1\0\5\13\1\344"+
    "\22\13\31\0\6\13\1\0\1\13\4\0\4\13\1\0"+
    "\4\13\1\345\23\13\31\0\6\13\1\0\1\13\4\0"+
    "\4\13\1\0\10\13\1\346\17\13\31\0\6\13\1\0"+
    "\1\13\4\0\4\13\1\0\3\13\1\347\24\13\31\0"+
    "\6\13\1\0\1\13\4\0\4\13\1\0\11\13\1\350"+
    "\16\13\31\0\6\13\1\0\1\13\4\0\4\13\1\0"+
    "\10\13\1\351\17\13\31\0\6\13\1\0\1\13\4\0"+
    "\4\13\1\0\6\13\1\352\21\13\31\0\6\13\1\0"+
    "\1\13\4\0\4\13\1\0\2\13\1\353\25\13\31\0"+
    "\6\13\1\0\1\13\4\0\4\13\1\0\16\13\1\354"+
    "\11\13\31\0\6\13\1\0\1\13\4\0\4\13\1\0"+
    "\10\13\1\355\17\13\31\0\6\13\1\0\1\13\4\0"+
    "\4\13\1\0\5\13\1\356\22\13\31\0\6\13\1\0"+
    "\1\13\4\0\4\13\1\0\2\13\1\357\1\360\24\13"+
    "\31\0\6\13\1\0\1\13\4\0\4\13\1\0\2\13"+
    "\1\361\25\13\31\0\6\13\1\0\1\13\4\0\4\13"+
    "\1\0\4\13\1\362\23\13\31\0\6\13\1\0\1\13"+
    "\4\0\4\13\1\0\22\13\1\363\5\13\31\0\6\13"+
    "\1\0\1\13\4\0\4\13\1\0\10\13\1\364\17\13"+
    "\31\0\6\13\1\0\1\13\4\0\4\13\1\0\10\13"+
    "\1\365\17\13\31\0\6\13\1\0\1\13\4\0\4\13"+
    "\1\0\15\13\1\366\12\13\31\0\6\13\1\0\1\13"+
    "\4\0\4\13\1\0\7\13\1\367\20\13\31\0\6\13"+
    "\1\0\1\13\4\0\4\13\1\0\3\13\1\370\24\13"+
    "\31\0\6\13\1\0\1\13\4\0\4\13\1\0\10\13"+
    "\1\371\17\13\31\0\6\13\1\0\1\13\4\0\4\13"+
    "\1\0\6\13\1\372\1\373\20\13\31\0\6\13\1\0"+
    "\1\13\4\0\4\13\1\0\1\13\1\374\26\13\31\0"+
    "\6\13\1\0\1\13\4\0\4\13\1\0\1\375\27\13"+
    "\31\0\6\13\1\0\1\13\4\0\4\13\1\0\2\13"+
    "\1\376\25\13\31\0\6\13\1\0\1\13\4\0\4\13"+
    "\1\0\1\377\27\13\31\0\6\13\1\0\1\13\4\0"+
    "\4\13\1\0\1\u0100\27\13\31\0\6\13\1\0\1\13"+
    "\4\0\4\13\1\0\6\13\1\u0101\21\13\31\0\6\13"+
    "\1\0\1\13\4\0\4\13\1\0\12\13\1\u0102\15\13"+
    "\31\0\6\13\1\0\1\13\4\0\4\13\1\0\3\13"+
    "\1\u0103\24\13\31\0\6\13\1\0\1\13\4\0\4\13"+
    "\1\0\25\13\1\u0104\2\13\31\0\6\13\1\0\1\13"+
    "\4\0\4\13\1\0\7\13\1\u0105\20\13\31\0\6\13"+
    "\1\0\1\13\4\0\4\13\1\0\1\u0106\27\13\31\0"+
    "\6\13\1\0\1\13\4\0\4\13\1\0\17\13\1\u0107"+
    "\10\13\31\0\6\13\1\0\1\13\4\0\4\13\1\0"+
    "\7\13\1\u0108\20\13\31\0\6\13\1\0\1\13\41\0"+
    "\1\u0109\44\0\4\321\1\0\2\321\3\0\1\321\1\0"+
    "\1\110\1\321\6\0\2\321\40\0\1\321\1\110\1\0"+
    "\1\321\3\0\1\321\71\0\1\324\14\0\4\13\1\0"+
    "\4\13\1\u010a\23\13\31\0\6\13\1\0\1\13\4\0"+
    "\4\13\1\0\12\13\1\u010b\15\13\31\0\6\13\1\0"+
    "\1\13\4\0\4\13\1\0\10\13\1\u010c\17\13\31\0"+
    "\6\13\1\0\1\13\4\0\4\13\1\0\15\13\1\u010d"+
    "\12\13\31\0\6\13\1\0\1\13\4\0\4\13\1\0"+
    "\5\13\1\u010e\22\13\31\0\6\13\1\0\1\13\4\0"+
    "\4\13\1\0\14\13\1\u010f\13\13\31\0\6\13\1\0"+
    "\1\13\4\0\4\13\1\0\3\13\1\u0110\24\13\31\0"+
    "\6\13\1\0\1\13\4\0\4\13\1\0\4\13\1\u0111"+
    "\23\13\31\0\6\13\1\0\1\13\4\0\4\13\1\0"+
    "\5\13\1\u0112\22\13\31\0\6\13\1\0\1\13\4\0"+
    "\4\13\1\0\2\13\1\u0113\25\13\31\0\6\13\1\0"+
    "\1\13\4\0\4\13\1\0\26\13\1\u0114\1\13\31\0"+
    "\6\13\1\0\1\13\4\0\4\13\1\0\4\13\1\u0115"+
    "\23\13\31\0\6\13\1\0\1\13\4\0\4\13\1\0"+
    "\14\13\1\u0116\13\13\31\0\6\13\1\0\1\13\4\0"+
    "\4\13\1\0\3\13\1\u0117\24\13\31\0\6\13\1\0"+
    "\1\13\4\0\4\13\1\0\15\13\1\u0118\12\13\31\0"+
    "\6\13\1\0\1\13\4\0\4\13\1\0\2\13\1\u0119"+
    "\25\13\31\0\6\13\1\0\1\13\4\0\4\13\1\0"+
    "\11\13\1\u011a\16\13\31\0\6\13\1\0\1\13\4\0"+
    "\4\13\1\0\25\13\1\u011b\2\13\31\0\6\13\1\0"+
    "\1\13\4\0\4\13\1\0\1\u011c\27\13\31\0\6\13"+
    "\1\0\1\13\4\0\4\13\1\0\4\13\1\u011d\23\13"+
    "\31\0\6\13\1\0\1\13\4\0\4\13\1\0\4\13"+
    "\1\u011e\23\13\31\0\6\13\1\0\1\13\4\0\4\13"+
    "\1\0\10\13\1\u011f\17\13\31\0\6\13\1\0\1\13"+
    "\4\0\4\13\1\0\7\13\1\u0120\20\13\31\0\6\13"+
    "\1\0\1\13\4\0\4\13\1\0\16\13\1\u0121\11\13"+
    "\31\0\6\13\1\0\1\13\4\0\4\13\1\0\10\13"+
    "\1\u0122\17\13\31\0\6\13\1\0\1\13\4\0\4\13"+
    "\1\0\3\13\1\u0123\24\13\31\0\6\13\1\0\1\13"+
    "\4\0\4\13\1\0\7\13\1\u0124\20\13\31\0\6\13"+
    "\1\0\1\13\4\0\4\13\1\0\1\u0125\27\13\31\0"+
    "\6\13\1\0\1\13\4\0\4\13\1\0\10\13\1\u0126"+
    "\17\13\31\0\6\13\1\0\1\13\4\0\4\13\1\0"+
    "\1\u0127\27\13\31\0\6\13\1\0\1\13\4\0\4\13"+
    "\1\0\15\13\1\u0128\12\13\31\0\6\13\1\0\1\13"+
    "\4\0\4\13\1\0\3\13\1\u0129\24\13\31\0\6\13"+
    "\1\0\1\13\4\0\4\13\1\0\10\13\1\u012a\17\13"+
    "\31\0\6\13\1\0\1\13\4\0\4\13\1\0\1\u012b"+
    "\27\13\31\0\6\13\1\0\1\13\4\0\4\13\1\0"+
    "\1\u012c\27\13\31\0\6\13\1\0\1\13\4\0\4\13"+
    "\1\0\5\13\1\u012d\22\13\31\0\6\13\1\0\1\13"+
    "\4\0\4\13\1\0\3\13\1\u012e\24\13\31\0\6\13"+
    "\1\0\1\13\4\0\4\13\1\0\4\13\1\u012f\23\13"+
    "\31\0\6\13\1\0\1\13\4\0\4\13\1\0\14\13"+
    "\1\u0130\13\13\31\0\6\13\1\0\1\13\4\0\4\13"+
    "\1\0\15\13\1\u0131\12\13\31\0\6\13\1\0\1\13"+
    "\4\0\4\13\1\0\2\13\1\u0132\25\13\31\0\6\13"+
    "\1\0\1\13\4\0\4\13\1\0\11\13\1\u0133\16\13"+
    "\31\0\6\13\1\0\1\13\4\0\4\13\1\0\11\13"+
    "\1\u0134\16\13\31\0\6\13\1\0\1\13\4\0\4\13"+
    "\1\0\17\13\1\u0135\10\13\31\0\6\13\1\0\1\13"+
    "\4\0\4\13\1\0\10\13\1\u0136\17\13\31\0\6\13"+
    "\1\0\1\13\4\0\4\13\1\0\11\13\1\u0137\16\13"+
    "\31\0\6\13\1\0\1\13\4\0\4\13\1\0\20\13"+
    "\1\u0138\7\13\31\0\6\13\1\0\1\13\4\0\4\13"+
    "\1\0\3\13\1\u0139\24\13\31\0\6\13\1\0\1\13"+
    "\4\0\4\13\1\0\23\13\1\u013a\4\13\31\0\6\13"+
    "\1\0\1\13\4\0\4\13\1\0\10\13\1\u013b\17\13"+
    "\31\0\6\13\1\0\1\13\4\0\4\13\1\0\7\13"+
    "\1\u013c\20\13\31\0\6\13\1\0\1\13\4\0\4\13"+
    "\1\0\7\13\1\u013d\20\13\31\0\6\13\1\0\1\13"+
    "\4\0\4\13\1\0\22\13\1\u013e\5\13\31\0\6\13"+
    "\1\0\1\13\4\0\4\13\1\0\5\13\1\u013f\22\13"+
    "\31\0\6\13\1\0\1\13\4\0\4\13\1\0\3\13"+
    "\1\u0140\24\13\31\0\6\13\1\0\1\13\4\0\4\13"+
    "\1\0\5\13\1\u0141\22\13\31\0\6\13\1\0\1\13"+
    "\4\0\4\13\1\0\15\13\1\u0142\12\13\31\0\6\13"+
    "\1\0\1\13\4\0\4\13\1\0\5\13\1\u0143\22\13"+
    "\31\0\6\13\1\0\1\13\4\0\4\13\1\0\11\13"+
    "\1\u0144\16\13\31\0\6\13\1\0\1\13\4\0\4\13"+
    "\1\0\20\13\1\u0145\7\13\31\0\6\13\1\0\1\13"+
    "\4\0\4\13\1\0\6\13\1\u0146\21\13\31\0\6\13"+
    "\1\0\1\13\4\0\4\13\1\0\10\13\1\u0147\17\13"+
    "\31\0\6\13\1\0\1\13\4\0\4\13\1\0\16\13"+
    "\1\u0148\11\13\31\0\6\13\1\0\1\13\4\0\4\13"+
    "\1\0\2\13\1\u0149\25\13\31\0\6\13\1\0\1\13"+
    "\4\0\4\13\1\0\5\13\1\u014a\22\13\31\0\6\13"+
    "\1\0\1\13\4\0\4\13\1\0\1\u014b\27\13\31\0"+
    "\6\13\1\0\1\13\4\0\4\13\1\0\10\13\1\u014c"+
    "\17\13\31\0\6\13\1\0\1\13\4\0\4\13\1\0"+
    "\3\13\1\u014d\24\13\31\0\6\13\1\0\1\13\4\0"+
    "\4\13\1\0\13\13\1\u014e\14\13\31\0\6\13\1\0"+
    "\1\13\4\0\4\13\1\0\10\13\1\u014f\17\13\31\0"+
    "\6\13\1\0\1\13\4\0\4\13\1\0\3\13\1\u0150"+
    "\24\13\31\0\6\13\1\0\1\13\4\0\4\13\1\0"+
    "\10\13\1\u0151\17\13\31\0\6\13\1\0\1\13\4\0"+
    "\4\13\1\0\7\13\1\u0152\20\13\31\0\6\13\1\0"+
    "\1\13\4\0\4\13\1\0\3\13\1\u0153\24\13\31\0"+
    "\6\13\1\0\1\13\4\0\4\13\1\0\24\13\1\u0154"+
    "\3\13\31\0\6\13\1\0\1\13\4\0\4\13\1\0"+
    "\11\13\1\u0155\16\13\31\0\6\13\1\0\1\13\4\0"+
    "\4\13\1\0\11\13\1\u0156\16\13\31\0\6\13\1\0"+
    "\1\13\4\0\4\13\1\0\10\13\1\u0157\17\13\31\0"+
    "\6\13\1\0\1\13\4\0\4\13\1\0\10\13\1\u0158"+
    "\17\13\31\0\6\13\1\0\1\13\4\0\4\13\1\0"+
    "\5\13\1\u0159\22\13\31\0\6\13\1\0\1\13\4\0"+
    "\4\13\1\0\11\13\1\u015a\16\13\31\0\6\13\1\0"+
    "\1\13\4\0\4\13\1\0\10\13\1\u015b\17\13\31\0"+
    "\6\13\1\0\1\13\4\0\4\13\1\0\10\13\1\u015c"+
    "\17\13\31\0\6\13\1\0\1\13\4\0\4\13\1\0"+
    "\15\13\1\u015d\12\13\31\0\6\13\1\0\1\13\4\0"+
    "\4\13\1\0\3\13\1\u015e\24\13\31\0\6\13\1\0"+
    "\1\13\4\0\4\13\1\0\6\13\1\u015f\21\13\31\0"+
    "\6\13\1\0\1\13\4\0\4\13\1\0\10\13\1\u0160"+
    "\17\13\31\0\6\13\1\0\1\13\4\0\4\13\1\0"+
    "\3\13\1\u0161\24\13\31\0\6\13\1\0\1\13\4\0"+
    "\4\13\1\0\17\13\1\u0162\10\13\31\0\6\13\1\0"+
    "\1\13\4\0\4\13\1\0\27\13\1\u0163\31\0\6\13"+
    "\1\0\1\13\4\0\4\13\1\0\20\13\1\u0164\7\13"+
    "\31\0\6\13\1\0\1\13\4\0\4\13\1\0\2\13"+
    "\1\u0165\25\13\31\0\6\13\1\0\1\13\4\0\4\13"+
    "\1\0\10\13\1\u0166\17\13\31\0\6\13\1\0\1\13"+
    "\4\0\4\13\1\0\17\13\1\u0167\10\13\31\0\6\13"+
    "\1\0\1\13";

  /** 
   * The transition table of the DFA
   */
  final private static int yytrans [] = yy_unpack();


  /* error codes */
  private static final int YY_UNKNOWN_ERROR = 0;
  private static final int YY_ILLEGAL_STATE = 1;
  private static final int YY_NO_MATCH = 2;
  private static final int YY_PUSHBACK_2BIG = 3;

  /* error messages for the codes above */
  private static final String[] YY_ERROR_MSG = {
    "Unkown internal scanner error",
    "Internal error: unknown state",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * YY_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private final static byte YY_ATTRIBUTE[] = {
     0,  0,  0,  0,  0,  9,  9,  1,  9,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  9,  1, 
     1,  1,  9,  9,  1,  1,  9,  9,  1,  1,  9,  1,  9,  9,  9,  9, 
     9,  1,  1,  9,  9,  1,  1,  1,  9,  9,  1,  1,  1,  9,  1,  1, 
     1,  9,  1,  1,  1,  9,  0,  9,  9,  1,  9,  9,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  9,  9,  9,  9,  9,  9,  1,  9,  9,  9,  9,  1,  9,  9,  9, 
     9,  9,  9,  0,  1,  0,  9,  1,  9,  9,  9,  9,  9,  9,  9,  1, 
     9,  9,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  9,  9,  0,  1, 
     0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  9,  1,  9, 
     1,  9,  0,  9,  9,  9,  9,  9,  9,  9,  9,  0,  9,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  9,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1
  };

  /** the input buffer */
  private at.dms.compiler.antlr.extra.InputBuffer buffer;

  /** the input device : unused but referenced by generated constructors */
  private java.io.Reader yy_reader;

  /** the current state of the DFA */
  private int yy_state;

  /** the current lexical state */
  private int yy_lexical_state = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char[] yy_buffer = null;

  /** the textposition at the last accepting state */
  private int yy_markedPos;

  /** the textposition at the last state to be included in yytext */
  private int yy_pushbackPos;

  /** the current text position in the buffer */
  private int yy_currentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int yy_startRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int yy_endRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the
   * matched text
   */
  private int yycolumn;

  /**
   * yy_atBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean yy_atBOL = true;

  /** yy_atEOF == true <=> the scanner is at the EOF */
  private boolean yy_atEOF;

  /* user code: */
  public KjcScanner(Compiler compiler, InputBuffer buffer) {
    super(compiler, buffer);
    this.buffer = buffer;
  }

  /**
   * Creates a character literal token.
   */
  private CToken buildCharacterLiteral(char image) {
    return new CToken(CHARACTER_LITERAL, String.valueOf(image));
  }


  private final StringBuffer	string = new StringBuffer();


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public KjcScanner(java.io.Reader in) {
    // dummy: we provide our own constructor
  super(null, null);
    this.yy_reader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public KjcScanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the split, compressed DFA transition table.
   *
   * @return the unpacked transition table
   */
  private static int [] yy_unpack() {
    int [] trans = new int[16170];
    int offset = 0;
    offset = yy_unpack(yy_packed0, offset, trans);
    return trans;
  }

  /** 
   * Unpacks the compressed DFA transition table.
   *
   * @param packed   the packed transition table
   * @return         the index of the last entry
   */
  private static int yy_unpack(String packed, int offset, int [] trans) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do trans[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] yy_unpack_cmap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1780) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Gets the next input character.
   *
   * @return      the next character of the input stream, EOF if the
   *              end of the stream is reached.
   * @exception   IOException  if any I/O-Error occurs
   */
  private int yy_advance() throws java.io.IOException {

    /* standard case */
    if (yy_currentPos < yy_endRead) { return yy_buffer[yy_currentPos++]; }

    /* if the eof is reached, we don't need to work hard */
    if (yy_atEOF) { return YYEOF; }

    /* otherwise: need to refill the buffer */

    /* first: make room (if you can) */
    if (yy_startRead > 0) {
      System.arraycopy(yy_buffer, yy_startRead,
                       yy_buffer, 0,
                       yy_endRead-yy_startRead);

      /* translate stored positions */
      yy_endRead-= yy_startRead;
      yy_currentPos-= yy_startRead;
      yy_markedPos-= yy_startRead;
      yy_pushbackPos-= yy_startRead;
      yy_startRead = 0;
    }

    /* is the buffer big enough? */
    if (yy_currentPos >= yy_buffer.length) {
      /* if not: blow it up */
      char[]  newBuffer = new char[yy_currentPos*2];
      System.arraycopy(yy_buffer, 0, newBuffer, 0, yy_buffer.length);
      yy_buffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = buffer.read(yy_buffer, yy_endRead, yy_buffer.length-yy_endRead);

    if ( numRead == -1 ) { return YYEOF; }

    yy_endRead+= numRead;

    return yy_buffer[yy_currentPos++];
  }

  /**
   * Exports the buffer state.
   */
  public at.dms.compiler.antlr.extra.InputBufferState getBufferState() {
    at.dms.compiler.antlr.extra.InputBufferState	state;

    state = new at.dms.compiler.antlr.extra.InputBufferState(yy_buffer,
								   yy_startRead,
								   yy_endRead,
								   yy_currentPos,
								   yy_markedPos,
								   yy_pushbackPos,
								   yy_atEOF);
    // invalidate buffer
    yy_buffer = null;
    return state;
  }

  /**
   * Imports the buffer state, if exists, otherwise initialise buffer.
   */
  private void initBufferState() {
    at.dms.compiler.antlr.extra.InputBufferState	state;

    state = buffer.getBufferState(this);
    if (state == null) {
      yy_buffer = new char[YY_BUFFERSIZE];
      // other variables initialised to their default values
    } else {
      yy_buffer = state.buffer;
      yy_startRead = state.startRead;
      yy_endRead = state.endRead;
      yy_currentPos = state.currentPos;
      yy_markedPos = state.markedPos;
      yy_pushbackPos = state.pushbackPos;
      yy_atEOF = state.atEOF;
    }
  }

  /**
   * Closes the input stream.
   */
  final public void yyclose() throws java.io.IOException {
    yy_atEOF = true;            /* indicate end of file */
    yy_endRead = yy_startRead;  /* invalidate buffer    */

    if (yy_reader != null) {
      yy_reader.close();
    }
  }


  /**
   * Closes the current stream, and resets the
   * scanner to read from a new input stream.
   *
   * All internal variables are reset, the old input stream
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>YY_INITIAL</tt>.
   *
   * @param reader   the new input stream
   */
  final public void yyreset(java.io.Reader reader) throws java.io.IOException {
    yyclose();
    yy_reader = reader;
    yy_atBOL  = true;
    yy_atEOF  = false;
    yy_endRead = yy_startRead = 0;
    yy_currentPos = yy_markedPos = yy_pushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    yy_lexical_state = YYINITIAL;
  }

  /**
   * Returns the current lexical state.
   */
  final public int yystate() {
    return yy_lexical_state;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  final public void yybegin(int newState) {
    yy_lexical_state = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  final public String yytext() {
    return new String( yy_buffer, yy_startRead, yy_markedPos-yy_startRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  final public char yycharat(int pos) {
    return yy_buffer[yy_startRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  final public int yylength() {
    return yy_markedPos-yy_startRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void yy_ScanError(int errorCode) {
    String message;
    try {
      message = YY_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = YY_ERROR_MSG[YY_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  private void yypushback(int number)  {
    if ( number > yylength() ) {
      yy_ScanError(YY_PUSHBACK_2BIG);
    }

    yy_markedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   IOException  if any I/O-Error occurs
   */
  public at.dms.compiler.antlr.runtime.Token nextTokenImpl() throws java.io.IOException {
    int yy_input;
    int yy_action;


    if (yy_buffer == null) {
      initBufferState();
    }

    while (true) {

      yy_action = -1;

      yy_currentPos = yy_startRead = yy_markedPos;

      yy_state = yy_lexical_state;


      yy_forAction: {
        while (true) {

          yy_input = yy_advance();

          if ( yy_input == YYEOF ) { break yy_forAction; }

          int yy_next = yytrans[ yy_rowMap[yy_state] + yycmap[yy_input] ];
          if (yy_next == -1) break yy_forAction;
          yy_state = yy_next;

          int yy_attributes = YY_ATTRIBUTE[yy_state];
          if ( (yy_attributes & 1) > 0 ) {
            yy_action = yy_state;
            yy_markedPos = yy_currentPos;
            if ( (yy_attributes & 8) > 0 ) break yy_forAction;
          }

        }
      }


      switch (yy_action) {

        case 358: 
          {  return TOKEN_LITERAL_synchronized;  }
        case 360: break;
        case 356: 
          {  return TOKEN_LITERAL_implements;  }
        case 361: break;
        case 355: 
          {  return TOKEN_LITERAL_instanceof;  }
        case 362: break;
        case 353: 
          {  return TOKEN_LITERAL_protected;  }
        case 363: break;
        case 351: 
          {  return TOKEN_LITERAL_interface;  }
        case 364: break;
        case 349: 
          {  return TOKEN_LITERAL_transient;  }
        case 365: break;
        case 347: 
          {  return TOKEN_LITERAL_volatile;  }
        case 366: break;
        case 342: 
          {  return TOKEN_LITERAL_continue;  }
        case 367: break;
        case 339: 
          {  return TOKEN_LITERAL_strictfp;  }
        case 368: break;
        case 338: 
          {  return TOKEN_LITERAL_abstract;  }
        case 369: break;
        case 336: 
          {  return TOKEN_LITERAL_private;  }
        case 370: break;
        case 334: 
          {  return TOKEN_LITERAL_package;  }
        case 371: break;
        case 333: 
          {  return TOKEN_LITERAL_finally;  }
        case 372: break;
        case 332: 
          {  return TOKEN_LITERAL_default;  }
        case 373: break;
        case 328: 
          {  return TOKEN_LITERAL_extends;  }
        case 374: break;
        case 323: 
          {  return TOKEN_LITERAL_boolean;  }
        case 375: break;
        case 320: 
          {  return TOKEN_LITERAL_public;  }
        case 376: break;
        case 314: 
          {  return TOKEN_LITERAL_double;  }
        case 377: break;
        case 312: 
          {  return TOKEN_LITERAL_import;  }
        case 378: break;
        case 309: 
          {  return TOKEN_LITERAL_native;  }
        case 379: break;
        case 306: 
          {  return TOKEN_LITERAL_return;  }
        case 380: break;
        case 305: 
          {  return TOKEN_LITERAL_throws;  }
        case 381: break;
        case 303: 
          {  return TOKEN_LITERAL_switch;  }
        case 382: break;
        case 300: 
          {  return TOKEN_LITERAL_static;  }
        case 383: break;
        case 297: 
          {  return TOKEN_LITERAL_while;  }
        case 384: break;
        case 291: 
          {  return TOKEN_LITERAL_final;  }
        case 385: break;
        case 290: 
          {  return TOKEN_LITERAL_float;  }
        case 386: break;
        case 289: 
          {  return TOKEN_LITERAL_false;  }
        case 387: break;
        case 280: 
          {  return TOKEN_LITERAL_class;  }
        case 388: break;
        case 278: 
          {  return TOKEN_LITERAL_const;  }
        case 389: break;
        case 277: 
          {  return TOKEN_LITERAL_catch;  }
        case 390: break;
        case 275: 
          {  return TOKEN_LITERAL_throw;  }
        case 391: break;
        case 272: 
          {  return TOKEN_LITERAL_super;  }
        case 392: break;
        case 271: 
          {  return TOKEN_LITERAL_short;  }
        case 393: break;
        case 266: 
          {  return TOKEN_LITERAL_break;  }
        case 394: break;
        case 264: 
          {  return TOKEN_BSR_ASSIGN;  }
        case 395: break;
        case 262: 
          {  return TOKEN_LITERAL_void;  }
        case 396: break;
        case 256: 
          {  return TOKEN_LITERAL_goto;  }
        case 397: break;
        case 246: 
          {  return TOKEN_LITERAL_null;  }
        case 398: break;
        case 243: 
          {  return TOKEN_LITERAL_else;  }
        case 399: break;
        case 242: 
          {  return TOKEN_LITERAL_long;  }
        case 400: break;
        case 241: 
          {  return TOKEN_LITERAL_char;  }
        case 401: break;
        case 236: 
          {  return TOKEN_LITERAL_case;  }
        case 402: break;
        case 234: 
          {  return TOKEN_LITERAL_this;  }
        case 403: break;
        case 232: 
          {  return TOKEN_LITERAL_true;  }
        case 404: break;
        case 224: 
          {  return TOKEN_LITERAL_byte;  }
        case 405: break;
        case 220: 
          {  yybegin(YYINITIAL); return buildCharacterLiteral('\\');  }
        case 406: break;
        case 218: 
          {  yybegin(YYINITIAL); return buildCharacterLiteral('\'');  }
        case 407: break;
        case 217: 
          {  yybegin(YYINITIAL); return buildCharacterLiteral('\"');  }
        case 408: break;
        case 216: 
          {  yybegin(YYINITIAL); return buildCharacterLiteral('\f');  }
        case 409: break;
        case 215: 
          {  yybegin(YYINITIAL); return buildCharacterLiteral('\n');  }
        case 410: break;
        case 214: 
          {  yybegin(YYINITIAL); return buildCharacterLiteral('\r');  }
        case 411: break;
        case 213: 
          {  yybegin(YYINITIAL); return buildCharacterLiteral('\t');  }
        case 412: break;
        case 212: 
          {  yybegin(YYINITIAL); return buildCharacterLiteral('\b');  }
        case 413: break;
        case 207: 
          {  return TOKEN_SL_ASSIGN;  }
        case 414: break;
        case 206: 
          {  return TOKEN_BSR;  }
        case 415: break;
        case 205: 
          {  return TOKEN_SR_ASSIGN;  }
        case 416: break;
        case 194: 
          {  return TOKEN_LITERAL_for;  }
        case 417: break;
        case 189: 
          {  return TOKEN_LITERAL_int;  }
        case 418: break;
        case 186: 
          {  return TOKEN_LITERAL_new;  }
        case 419: break;
        case 172: 
          {  return TOKEN_LITERAL_try;  }
        case 420: break;
        case 60: 
        case 61: 
          {  reportTrouble(CompilerMessages.BAD_END_OF_LINE, new Object[]{ "character literal" });  }
        case 421: break;
        case 57: 
          {  yybegin(YYINITIAL); return new CToken(STRING_LITERAL, string.toString());  }
        case 422: break;
        case 55: 
        case 56: 
          {  reportTrouble(CompilerMessages.BAD_END_OF_LINE, new Object[]{ "string literal" });  }
        case 423: break;
        case 54: 
        case 63: 
        case 67: 
        case 156: 
          {  string.append(yytext());  }
        case 424: break;
        case 52: 
          {  yybegin(CHARLITERAL);  }
        case 425: break;
        case 51: 
          {  yybegin(STRINGLITERAL); string.setLength(0);  }
        case 426: break;
        case 50: 
          {  return TOKEN_STAR;  }
        case 427: break;
        case 49: 
          {  return TOKEN_SLASH;  }
        case 428: break;
        case 48: 
          {  return TOKEN_SEMI;  }
        case 429: break;
        case 47: 
          {  return TOKEN_RPAREN;  }
        case 430: break;
        case 46: 
          {  return TOKEN_RCURLY;  }
        case 431: break;
        case 45: 
          {  return TOKEN_RBRACK;  }
        case 432: break;
        case 44: 
          {  return TOKEN_QUESTION;  }
        case 433: break;
        case 43: 
          {  return TOKEN_PERCENT;  }
        case 434: break;
        case 42: 
          {  return TOKEN_LPAREN;  }
        case 435: break;
        case 41: 
          {  return TOKEN_LNOT;  }
        case 436: break;
        case 40: 
          {  return TOKEN_LT;  }
        case 437: break;
        case 39: 
          {  return TOKEN_LCURLY;  }
        case 438: break;
        case 29: 
          {  return TOKEN_BAND;  }
        case 439: break;
        case 28: 
          {  return TOKEN_ASSIGN;  }
        case 440: break;
        case 11: 
          {  return TOKEN_PLUS;  }
        case 441: break;
        case 10: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
        case 24: 
        case 25: 
        case 26: 
        case 27: 
        case 76: 
        case 77: 
        case 78: 
        case 79: 
        case 80: 
        case 81: 
        case 82: 
        case 83: 
        case 84: 
        case 85: 
        case 86: 
        case 87: 
        case 88: 
        case 89: 
        case 90: 
        case 91: 
        case 92: 
        case 93: 
        case 94: 
        case 95: 
        case 96: 
        case 97: 
        case 98: 
        case 100: 
        case 102: 
        case 103: 
        case 104: 
        case 105: 
        case 106: 
        case 107: 
        case 108: 
        case 109: 
        case 110: 
        case 111: 
        case 112: 
        case 161: 
        case 162: 
        case 163: 
        case 164: 
        case 165: 
        case 166: 
        case 167: 
        case 168: 
        case 169: 
        case 170: 
        case 171: 
        case 173: 
        case 174: 
        case 175: 
        case 176: 
        case 177: 
        case 178: 
        case 179: 
        case 180: 
        case 181: 
        case 182: 
        case 183: 
        case 184: 
        case 185: 
        case 187: 
        case 188: 
        case 190: 
        case 191: 
        case 192: 
        case 193: 
        case 195: 
        case 196: 
        case 197: 
        case 198: 
        case 199: 
        case 200: 
        case 201: 
        case 202: 
        case 203: 
        case 204: 
        case 221: 
        case 222: 
        case 223: 
        case 225: 
        case 226: 
        case 227: 
        case 228: 
        case 229: 
        case 230: 
        case 231: 
        case 233: 
        case 235: 
        case 237: 
        case 238: 
        case 239: 
        case 240: 
        case 244: 
        case 245: 
        case 247: 
        case 248: 
        case 249: 
        case 250: 
        case 251: 
        case 252: 
        case 253: 
        case 254: 
        case 255: 
        case 257: 
        case 258: 
        case 259: 
        case 260: 
        case 261: 
        case 263: 
        case 265: 
        case 267: 
        case 268: 
        case 269: 
        case 270: 
        case 273: 
        case 274: 
        case 276: 
        case 279: 
        case 281: 
        case 282: 
        case 283: 
        case 284: 
        case 285: 
        case 286: 
        case 287: 
        case 288: 
        case 292: 
        case 293: 
        case 294: 
        case 295: 
        case 296: 
        case 298: 
        case 299: 
        case 301: 
        case 302: 
        case 304: 
        case 307: 
        case 308: 
        case 310: 
        case 311: 
        case 313: 
        case 315: 
        case 316: 
        case 317: 
        case 318: 
        case 319: 
        case 321: 
        case 322: 
        case 324: 
        case 325: 
        case 326: 
        case 327: 
        case 329: 
        case 330: 
        case 331: 
        case 335: 
        case 337: 
        case 340: 
        case 341: 
        case 343: 
        case 344: 
        case 345: 
        case 346: 
        case 348: 
        case 350: 
        case 352: 
        case 354: 
        case 357: 
          {  return new CToken(IDENT, yytext().intern());  }
        case 442: break;
        case 9: 
        case 53: 
        case 71: 
        case 132: 
        case 208: 
          {  return new CToken(INTEGER_LITERAL, yytext());  }
        case 443: break;
        case 7: 
        case 8: 
          {  incrementLine();  }
        case 444: break;
        case 6: 
          {  /* ignore */  }
        case 445: break;
        case 5: 
        case 58: 
        case 59: 
        case 62: 
        case 66: 
          {  reportTrouble(CompilerMessages.ILLEGAL_CHAR, new Object[]{ yytext() });  }
        case 446: break;
        case 30: 
          {  return TOKEN_BNOT;  }
        case 447: break;
        case 31: 
          {  return TOKEN_BOR;  }
        case 448: break;
        case 32: 
          {  return TOKEN_GT;  }
        case 449: break;
        case 33: 
          {  return TOKEN_BXOR;  }
        case 450: break;
        case 34: 
          {  return TOKEN_COLON;  }
        case 451: break;
        case 35: 
          {  return TOKEN_COMMA;  }
        case 452: break;
        case 36: 
          {  return TOKEN_MINUS;  }
        case 453: break;
        case 37: 
          {  return TOKEN_DOT;  }
        case 454: break;
        case 38: 
          {  return TOKEN_LBRACK;  }
        case 455: break;
        case 72: 
        case 73: 
        case 159: 
          {  return new CToken(REAL_LITERAL, yytext());  }
        case 456: break;
        case 74: 
          {  return TOKEN_INC;  }
        case 457: break;
        case 75: 
          {  return TOKEN_PLUS_ASSIGN;  }
        case 458: break;
        case 99: 
          {  return TOKEN_LITERAL_if;  }
        case 459: break;
        case 101: 
          {  return TOKEN_LITERAL_do;  }
        case 460: break;
        case 113: 
          {  return TOKEN_EQUAL;  }
        case 461: break;
        case 114: 
          {  return TOKEN_BAND_ASSIGN;  }
        case 462: break;
        case 115: 
          {  return TOKEN_LAND;  }
        case 463: break;
        case 116: 
          {  return TOKEN_BOR_ASSIGN;  }
        case 464: break;
        case 117: 
          {  return TOKEN_LOR;  }
        case 465: break;
        case 118: 
          {  return TOKEN_GE;  }
        case 466: break;
        case 119: 
          {  return TOKEN_SR;  }
        case 467: break;
        case 120: 
          {  return TOKEN_BXOR_ASSIGN;  }
        case 468: break;
        case 121: 
          {  return TOKEN_MINUS_ASSIGN;  }
        case 469: break;
        case 122: 
          {  return TOKEN_DEC;  }
        case 470: break;
        case 123: 
          {  return TOKEN_LE;  }
        case 471: break;
        case 124: 
          {  return TOKEN_SL;  }
        case 472: break;
        case 125: 
          {  return TOKEN_NOT_EQUAL;  }
        case 473: break;
        case 126: 
          {  return TOKEN_PERCENT_ASSIGN;  }
        case 474: break;
        case 127: 
          {  return TOKEN_SLASH_ASSIGN;  }
        case 475: break;
        case 128: 
          {  yybegin(ENDOFLINECOMMENT); string.setLength(0);  }
        case 476: break;
        case 129: 
          {  yybegin(TRADITIONALCOMMENT); string.setLength(0);  }
        case 477: break;
        case 130: 
          {  return TOKEN_STAR_ASSIGN;  }
        case 478: break;
        case 134: 
        case 146: 
        case 147: 
        case 148: 
        case 149: 
        case 150: 
        case 151: 
        case 152: 
        case 153: 
        case 154: 
        case 155: 
          {  reportTrouble(CompilerMessages.BAD_ESCAPE_SEQUENCE, new Object[]{ yytext() });  }
        case 479: break;
        case 136: 
          {  string.append('\b');  }
        case 480: break;
        case 137: 
          {  string.append('\t');  }
        case 481: break;
        case 138: 
          {  string.append('\r');  }
        case 482: break;
        case 139: 
          {  string.append('\n');  }
        case 483: break;
        case 140: 
          {  string.append('\f');  }
        case 484: break;
        case 141: 
          {  string.append('\"');  }
        case 485: break;
        case 142: 
          {  string.append('\'');  }
        case 486: break;
        case 144: 
          {  string.append('\\');  }
        case 487: break;
        case 145: 
          {  yybegin(YYINITIAL); return buildCharacterLiteral(yytext().charAt(0));  }
        case 488: break;
        case 211: 
          { 
				  yybegin(YYINITIAL);

				  int		val;

				  val = Integer.parseInt(yytext().substring(1, yylength()-1), 8);
				  return buildCharacterLiteral((char)val);
				 }
        case 489: break;
        case 157: 
          { 
				  yybegin(YYINITIAL);

				  if (string.length() > 0 && string.charAt(0) == '*') {
				    //!!! graf 001222: first '*' should be removed
				    addComment(new JavadocComment(string.toString(), false, false));
				  } else {
				    addComment(new JavaStyleComment(string.toString(), false, false, false));
				  }
				 }
        case 490: break;
        case 64: 
        case 65: 
          { 
				  incrementLine();
				  string.append(yytext());
				 }
        case 491: break;
        case 68: 
        case 69: 
          { 
				  yybegin(YYINITIAL);
				  incrementLine();
				  addComment(new JavaStyleComment(string.toString(), true, false, false));
				 }
        case 492: break;
        case 135: 
        case 143: 
        case 209: 
          { 
				  int		val;

				  val = Integer.parseInt(yytext().substring(1), 8);
				  string.append((char)val);
				 }
        case 493: break;
        default:
          if (yy_input == YYEOF && yy_startRead == yy_currentPos) {
            yy_atEOF = true;
            switch (yy_lexical_state) {
            case TRADITIONALCOMMENT:
              { 
				  reportTrouble(CompilerMessages.EOF_IN_TRADITIONAL_COMMENT, null);
				  return TOKEN_EOF;
				 }
            case 360: break;
            case ENDOFLINECOMMENT:
              { 
				  reportTrouble(new CWarning(getTokenReference(),
							     CompilerMessages.EOF_IN_ENDOFLINE_COMMENT));
				  return TOKEN_EOF;
				 }
            case 361: break;
            default:
              {   return TOKEN_EOF;
 }
            }
          } else {
            yy_ScanError(YY_NO_MATCH);
          }
      }
    }
  }


}
